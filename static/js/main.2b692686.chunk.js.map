{"version":3,"sources":["assets/media/promovid.mp4","assets/icons/play-button.svg","assets/icons/hamburger.svg","components/PlayButton.js","components/NavList.js","components/BackgroundVideo.js","components/Us.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PlayButton","react_default","a","createElement","className","src","playico","alt","Component","NavList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavMenu","setState","expanded","state","links","concat","web","native","from","opacity","x","to","keys","map","link","_ref","li","style","transform","interpolate","onClick","hamburgerico","BackgroundVideo","ReactPlayer_default","url","promoVid","loop","muted","playing","width","height","components_NavList","components_PlayButton","Us","App","components_BackgroundVideo","components_Us","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b692686.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/promovid.a9388f29.mp4\";","module.exports = __webpack_public_path__ + \"static/media/play-button.122f38c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.7c8eadc1.svg\";","import React, { Component } from 'react';\nimport playico from '../assets/icons/play-button.svg';\nimport '../styles/PlayButton.css';\n\nclass PlayButton extends Component {\n\n  render() {\n\n    return (\n      <img className='play-button' src={ playico } alt='Play' />\n    );\n\n  }\n}\n\nexport default PlayButton;","import React, { Component } from 'react';\nimport hamburgerico from '../assets/icons/hamburger.svg';\nimport { Trail, config, animated } from 'react-spring'\n\nimport '../styles/NavList.css';\n\nclass NavList extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      expanded: false\n    };\n\n  }\n\n  toggleNavMenu = () => {\n    this.setState({ expanded: !this.state.expanded });\n  }\n\n  render() {\n    let links = ['Us', 'Work', 'Develop', 'Deliver', 'Innovation', 'Contact'];\n\n    return (\n      <div className={`nav-container ${this.state.expanded ? 'nav-container-expand' : 'nav-container-collapse'}`}>\n        <ul className={`nav-links ${this.state.expanded ? '' : 'hide'}`}>\n          <Trail\n            native\n            from={{\n              opacity: 0,\n              x: 100\n            }}\n            to={{\n              opacity: this.state.expanded ? 1 : 0.25,\n              x: this.state.expanded ? 0 : -100\n            }}\n            keys={links}>\n            {links.map(link => ({ x, opacity }) => (\n              <animated.li\n                className=\"nav-link\"\n                // onClick={this.toggleNavMenu}\n                style={{\n                  opacity,\n                  transform: x.interpolate(x => `translate3d(${x}%,0,0)`)\n                }}\n              >{link}</animated.li>\n            ))}\n          </Trail>\n        </ul>\n        <div className='nav-title'>\n          <img className='hamburger-ico' onClick={this.toggleNavMenu} src={hamburgerico} alt=''></img>\n          <p className='company-title' onClick={this.toggleNavMenu}>Elevate Innovation</p>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n  \nexport default NavList;","import React, { Component } from 'react';\nimport ReactPlayer from 'react-player';\nimport promoVid from '../assets/media/promovid.mp4';\nimport PlayButton from './PlayButton';\nimport NavList from './NavList';\n\nimport '../styles/BackgroundVideo.css';\n\nclass BackgroundVideo extends Component {\n\n  render() {\n\n    return (\n      <div>\n        <div className='player-wrapper'>\n          <ReactPlayer\n            url={promoVid}\n\n            className='react-player'\n\n            loop={true}\n            muted={true}\n            playing={true}\n            width='100%'\n            height='100%'\n          />\n        </div>\n        <div className='overlay'>\n          <NavList />\n          <PlayButton />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default BackgroundVideo;\n","import React, { Component } from 'react';\nimport '../styles/Us.css';\n\nclass Us extends Component {\n\n  render() {\n\n    return (\n      <div>\n        <h2>Us</h2>\n        <p>We are a small agile team that makes communication simple and allows for quick execution from concept to reality</p>\n        <p>ENGINEERS, DESIGNERS, TECHNOLOGY CONSULTANTS, PROTOTYPE  AND MANUFACTURING  SPECIALISTS,  PRODUCT  INSPECTION  AND  TESTING  TEAMS,  QUALITY  CONTROL  CONSULTANTS  AND  LOGISTICS  PARTNERS.  </p>\n        <p>Offices</p>\n        <ul>\n          <li>Ft. Lauderdale</li>\n          <li>Miami</li>\n          <li>New York</li>\n          <li>Los Angeles</li>\n          <li>Hong Kong</li>\n          <li>Guangzhou</li>\n          <li>Delhit</li>\n        </ul>\n      </div>\n    );\n\n  }\n}\n\nexport default Us;","import React, { Component } from 'react';\nimport BackgroundVideo from './components/BackgroundVideo';\nimport Us from './components/Us'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className='app-grid-container'>\n          <BackgroundVideo />\n        </div>\n          <Us />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Noto Serif:300,400,700', 'serif']\n  }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}