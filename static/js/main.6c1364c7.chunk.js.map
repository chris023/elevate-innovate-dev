{"version":3,"sources":["assets/media/promovid.mp4","assets/brand/ElevateManagement_Logo.svg","components/BackgroundVideo.jsx","components/Nav.jsx","components/Header.jsx","components/Us.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BackgroundVideo","react_default","a","createElement","className","ReactPlayer_default","url","promoVid","loop","muted","playing","width","height","Nav","src","brandLogo","alt","Header","Fragment","components_BackgroundVideo","components_Nav","Us","config","google","families","App","lib_default","components_Header","components_Us","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qWCmBzBC,SAdS,kBACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,IAAKC,IACLH,UAAU,eACVI,MAAI,EACJC,OAAK,EACLC,SAAO,EACPC,MAAM,OACNC,OAAO,6BCHEC,SANH,kBACVZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOU,IAAKC,IAAWC,IAAI,0BCQ/BC,SATA,kBACbhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,UCaSC,SAnBJ,WAOT,OACEpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,SAXK,8MCCTmB,EAAS,CACbC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,gBAc1BC,EAVH,kBAEVxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KACEjB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAeoB,OAAQA,GACrBrB,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,SCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c1364c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/promovid.a9388f29.mp4\";","module.exports = __webpack_public_path__ + \"static/media/ElevateManagement_Logo.20c2ddf1.svg\";","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport promoVid from '../assets/media/promovid.mp4';\nimport '../styles/BackgroundVideo.css';\n\nconst BackgroundVideo = () => (\n  <div className=\"player-wrapper\">\n    <ReactPlayer\n      url={promoVid}\n      className=\"react-player\"\n      loop\n      muted\n      playing\n      width=\"100%\"\n      height=\"100%\"\n    />\n  </div>\n);\n\nexport default BackgroundVideo;\n","import React from 'react';\nimport brandLogo from '../assets/brand/ElevateManagement_Logo.svg';\n\nimport '../styles/Nav.css';\n\nconst Nav = () => (\n  <div className=\"nav-wrapper\">\n    <img className=\"logo\" src={brandLogo} alt=\"Elevate Innovation\" />\n  </div>\n);\n\nexport default Nav;\n","import React from 'react';\nimport BackgroundVideo from './BackgroundVideo';\nimport Nav from './Nav';\n\nimport '../styles/Header.css';\n\nconst Header = () => (\n  <React.Fragment>\n    <div className=\"header-wrapper\">\n      <BackgroundVideo />\n      <Nav />\n    </div>\n  </React.Fragment>\n);\n\nexport default Header;\n","import React from 'react';\n\nimport '../styles/Us.css';\n\nconst Us = () => {\n  const content = `\n    Our mission is to design, develop, and \n    deliver innovative products and solutions using\n    the latest technology while providing cost saving\n    across a managed global supply network`;\n\n  return (\n    <React.Fragment>\n      <div className=\"us-filter\">\n        <div className=\"us-wrapper flex-center\">\n          <h2>We are a design, production, and logistics company</h2>\n          <p>{content}</p>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Us;\n","import React from 'react';\nimport WebfontLoader from '@dr-kobros/react-webfont-loader';\nimport './App.css';\nimport Header from './components/Header';\nimport Us from './components/Us';\n\nconst config = {\n  google: {\n    families: ['Montserrat:300,400,700', 'sans-serif'],\n  },\n};\n\nconst App = () => (\n\n  <React.Fragment>\n    <WebfontLoader config={config}>\n      <Header />\n      <Us />\n    </WebfontLoader>\n  </React.Fragment>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}